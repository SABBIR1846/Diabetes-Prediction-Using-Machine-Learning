{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split,cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import  accuracy_score, f1_score, precision_score,confusion_matrix, recall_score, roc_auc_score\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier\n",
    "from sklearn.svm import SVC\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "from IPython.display import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('diabetes_data_upload.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Polyuria</th>\n",
       "      <th>Polydipsia</th>\n",
       "      <th>sudden weight loss</th>\n",
       "      <th>weakness</th>\n",
       "      <th>Polyphagia</th>\n",
       "      <th>Genital thrush</th>\n",
       "      <th>visual blurring</th>\n",
       "      <th>Itching</th>\n",
       "      <th>Irritability</th>\n",
       "      <th>delayed healing</th>\n",
       "      <th>partial paresis</th>\n",
       "      <th>muscle stiffness</th>\n",
       "      <th>Alopecia</th>\n",
       "      <th>Obesity</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45</td>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age Gender Polyuria Polydipsia sudden weight loss weakness Polyphagia  \\\n",
       "0   40   Male       No        Yes                 No      Yes         No   \n",
       "1   58   Male       No         No                 No      Yes         No   \n",
       "2   41   Male      Yes         No                 No      Yes        Yes   \n",
       "3   45   Male       No         No                Yes      Yes        Yes   \n",
       "4   60   Male      Yes        Yes                Yes      Yes        Yes   \n",
       "\n",
       "  Genital thrush visual blurring Itching Irritability delayed healing  \\\n",
       "0             No              No     Yes           No             Yes   \n",
       "1             No             Yes      No           No              No   \n",
       "2             No              No     Yes           No             Yes   \n",
       "3            Yes              No     Yes           No             Yes   \n",
       "4             No             Yes     Yes          Yes             Yes   \n",
       "\n",
       "  partial paresis muscle stiffness Alopecia Obesity     class  \n",
       "0              No              Yes      Yes     Yes  Positive  \n",
       "1             Yes               No      Yes      No  Positive  \n",
       "2              No              Yes      Yes      No  Positive  \n",
       "3              No               No       No      No  Positive  \n",
       "4             Yes              Yes      Yes     Yes  Positive  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age                   0\n",
       "Gender                0\n",
       "Polyuria              0\n",
       "Polydipsia            0\n",
       "sudden weight loss    0\n",
       "weakness              0\n",
       "Polyphagia            0\n",
       "Genital thrush        0\n",
       "visual blurring       0\n",
       "Itching               0\n",
       "Irritability          0\n",
       "delayed healing       0\n",
       "partial paresis       0\n",
       "muscle stiffness      0\n",
       "Alopecia              0\n",
       "Obesity               0\n",
       "class                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 520 entries, 0 to 519\n",
      "Data columns (total 17 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   Age                 520 non-null    int64 \n",
      " 1   Gender              520 non-null    object\n",
      " 2   Polyuria            520 non-null    object\n",
      " 3   Polydipsia          520 non-null    object\n",
      " 4   sudden weight loss  520 non-null    object\n",
      " 5   weakness            520 non-null    object\n",
      " 6   Polyphagia          520 non-null    object\n",
      " 7   Genital thrush      520 non-null    object\n",
      " 8   visual blurring     520 non-null    object\n",
      " 9   Itching             520 non-null    object\n",
      " 10  Irritability        520 non-null    object\n",
      " 11  delayed healing     520 non-null    object\n",
      " 12  partial paresis     520 non-null    object\n",
      " 13  muscle stiffness    520 non-null    object\n",
      " 14  Alopecia            520 non-null    object\n",
      " 15  Obesity             520 non-null    object\n",
      " 16  class               520 non-null    object\n",
      "dtypes: int64(1), object(16)\n",
      "memory usage: 69.2+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='class', ylabel='count'>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.countplot(df['class'],data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting to create pie chart and bar plot as subplots\n",
    "plt.figure(figsize=(14,7))\n",
    "plt.subplot(121)\n",
    "df[\"class\"].value_counts().plot.pie(autopct = \"%1.0f%%\",colors = sns.color_palette(\"prism\",7),startangle = 60,labels=[\"Positive\",\"Negative\"],\n",
    "wedgeprops={\"linewidth\":2,\"edgecolor\":\"k\"},explode=[.1,0],shadow =True)\n",
    "plt.title(\"Distribution of Target  variable\")\n",
    "\n",
    "plt.subplot(122)\n",
    "ax = df[\"class\"].value_counts().plot(kind=\"barh\")\n",
    "\n",
    "for i,j in enumerate(df[\"class\"].value_counts().values):\n",
    "    ax.text(.7,i,j,weight = \"bold\",fontsize=20)\n",
    "\n",
    "plt.title(\"Count of Traget variable\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Gender', ylabel='count'>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "sns.countplot(df['Gender'],hue=df['class'], data=df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row0_col0,#T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }#T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row0_col1,#T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row1_col0{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }</style><table id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Gender</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >Female</th>\n",
       "                        <td id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row0_col0\" class=\"data row0 col0\" >9.500000</td>\n",
       "                        <td id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row0_col1\" class=\"data row0 col1\" >54.060000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Male</th>\n",
       "                        <td id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row1_col0\" class=\"data row1 col0\" >90.500000</td>\n",
       "                        <td id=\"T_9f6ef700_ca94_11eb_9c7b_10e7c6f66545row1_col1\" class=\"data row1 col1\" >45.940000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7b2dd4f0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Gender', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row0_col0,#T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row0_col1,#T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Polyuria</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row0_col0\" class=\"data row0 col0\" >92.500000</td>\n",
       "                        <td id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row0_col1\" class=\"data row0 col1\" >24.060000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row1_col0\" class=\"data row1 col0\" >7.500000</td>\n",
       "                        <td id=\"T_9f7985a5_ca94_11eb_8e8b_10e7c6f66545row1_col1\" class=\"data row1 col1\" >75.940000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a765540a0>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Polyuria', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row0_col0,#T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row0_col1,#T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Polydipsia</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row0_col0\" class=\"data row0 col0\" >96.000000</td>\n",
       "                        <td id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row0_col1\" class=\"data row0 col1\" >29.690000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row1_col0\" class=\"data row1 col0\" >4.000000</td>\n",
       "                        <td id=\"T_9fb1d0df_ca94_11eb_bf13_10e7c6f66545row1_col1\" class=\"data row1 col1\" >70.310000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c3c99a0>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Polydipsia', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row0_col0,#T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row0_col1,#T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >sudden weight loss</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row0_col0\" class=\"data row0 col0\" >85.500000</td>\n",
       "                        <td id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row0_col1\" class=\"data row0 col1\" >41.250000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row1_col0\" class=\"data row1 col0\" >14.500000</td>\n",
       "                        <td id=\"T_9fe3f537_ca94_11eb_8dd1_10e7c6f66545row1_col1\" class=\"data row1 col1\" >58.750000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7bc431f0>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['sudden weight loss', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a0340514_ca94_11eb_b83c_10e7c6f66545row0_col0,#T_a0340514_ca94_11eb_b83c_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a0340514_ca94_11eb_b83c_10e7c6f66545row0_col1,#T_a0340514_ca94_11eb_b83c_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >weakness</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545row0_col0\" class=\"data row0 col0\" >56.500000</td>\n",
       "                        <td id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545row0_col1\" class=\"data row0 col1\" >31.870000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545row1_col0\" class=\"data row1 col0\" >43.500000</td>\n",
       "                        <td id=\"T_a0340514_ca94_11eb_b83c_10e7c6f66545row1_col1\" class=\"data row1 col1\" >68.120000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c2570d0>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['weakness', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row0_col0,#T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row0_col1,#T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Polyphagia</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row0_col0\" class=\"data row0 col0\" >76.000000</td>\n",
       "                        <td id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row0_col1\" class=\"data row0 col1\" >40.940000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row1_col0\" class=\"data row1 col0\" >24.000000</td>\n",
       "                        <td id=\"T_a1a7f34f_ca94_11eb_a526_10e7c6f66545row1_col1\" class=\"data row1 col1\" >59.060000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c17d160>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Polyphagia', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row0_col0,#T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row0_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row1_col0,#T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Genital thrush</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row0_col0\" class=\"data row0 col0\" >83.500000</td>\n",
       "                        <td id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row0_col1\" class=\"data row0 col1\" >74.060000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row1_col0\" class=\"data row1 col0\" >16.500000</td>\n",
       "                        <td id=\"T_a1d2e42e_ca94_11eb_aba3_10e7c6f66545row1_col1\" class=\"data row1 col1\" >25.940000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c261670>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Genital thrush', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a2040e45_ca94_11eb_bef6_10e7c6f66545row0_col0,#T_a2040e45_ca94_11eb_bef6_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a2040e45_ca94_11eb_bef6_10e7c6f66545row0_col1,#T_a2040e45_ca94_11eb_bef6_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >visual blurring</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545row0_col0\" class=\"data row0 col0\" >71.000000</td>\n",
       "                        <td id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545row0_col1\" class=\"data row0 col1\" >45.310000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545row1_col0\" class=\"data row1 col0\" >29.000000</td>\n",
       "                        <td id=\"T_a2040e45_ca94_11eb_bef6_10e7c6f66545row1_col1\" class=\"data row1 col1\" >54.690000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c3c98e0>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['visual blurring', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row0_col0,#T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row0_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row1_col0,#T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Itching</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row0_col0\" class=\"data row0 col0\" >50.500000</td>\n",
       "                        <td id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row0_col1\" class=\"data row0 col1\" >51.880000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row1_col0\" class=\"data row1 col0\" >49.500000</td>\n",
       "                        <td id=\"T_a23c8ce1_ca94_11eb_a434_10e7c6f66545row1_col1\" class=\"data row1 col1\" >48.120000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c1ef4f0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Itching', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row0_col0,#T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row0_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row1_col0,#T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Irritability</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row0_col0\" class=\"data row0 col0\" >92.000000</td>\n",
       "                        <td id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row0_col1\" class=\"data row0 col1\" >65.620000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row1_col0\" class=\"data row1 col0\" >8.000000</td>\n",
       "                        <td id=\"T_a25e3c10_ca94_11eb_b33d_10e7c6f66545row1_col1\" class=\"data row1 col1\" >34.380000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c248f40>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Irritability', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a2befd0b_ca94_11eb_b189_10e7c6f66545row0_col0,#T_a2befd0b_ca94_11eb_b189_10e7c6f66545row0_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a2befd0b_ca94_11eb_b189_10e7c6f66545row1_col0,#T_a2befd0b_ca94_11eb_b189_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >delayed healing</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545row0_col0\" class=\"data row0 col0\" >57.000000</td>\n",
       "                        <td id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545row0_col1\" class=\"data row0 col1\" >52.190000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545row1_col0\" class=\"data row1 col0\" >43.000000</td>\n",
       "                        <td id=\"T_a2befd0b_ca94_11eb_b189_10e7c6f66545row1_col1\" class=\"data row1 col1\" >47.810000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c3c9ee0>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "plot_criteria= ['delayed healing', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row0_col0,#T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row1_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row0_col1,#T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row1_col0{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >partial paresis</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row0_col0\" class=\"data row0 col0\" >84.000000</td>\n",
       "                        <td id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row0_col1\" class=\"data row0 col1\" >40.000000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row1_col0\" class=\"data row1 col0\" >16.000000</td>\n",
       "                        <td id=\"T_a2f2c4fa_ca94_11eb_888b_10e7c6f66545row1_col1\" class=\"data row1 col1\" >60.000000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c3dfaf0>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['partial paresis', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row0_col0,#T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row0_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row1_col0,#T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >muscle stiffness</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row0_col0\" class=\"data row0 col0\" >70.000000</td>\n",
       "                        <td id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row0_col1\" class=\"data row0 col1\" >57.810000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row1_col0\" class=\"data row1 col0\" >30.000000</td>\n",
       "                        <td id=\"T_a30c94c4_ca94_11eb_b4cc_10e7c6f66545row1_col1\" class=\"data row1 col1\" >42.190000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c241dc0>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria = ['muscle stiffness', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]],df[plot_criteria[1]],normalize='columns')\n",
    "      *100,2)).style.background_gradient(cmap=cm)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row0_col0,#T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }#T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row0_col1,#T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row1_col0{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }</style><table id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Alopecia</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row0_col0\" class=\"data row0 col0\" >49.500000</td>\n",
       "                        <td id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row0_col1\" class=\"data row0 col1\" >75.620000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row1_col0\" class=\"data row1 col0\" >50.500000</td>\n",
       "                        <td id=\"T_a32a7c73_ca94_11eb_a8fe_10e7c6f66545row1_col1\" class=\"data row1 col1\" >24.380000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7b2e27c0>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_criteria= ['Alopecia', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row0_col0,#T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row0_col1{\n",
       "            background-color:  #ff0000;\n",
       "            color:  #f1f1f1;\n",
       "        }#T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row1_col0,#T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row1_col1{\n",
       "            background-color:  #f3f0f0;\n",
       "            color:  #000000;\n",
       "        }</style><table id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545\" ><thead>    <tr>        <th class=\"index_name level0\" >class</th>        <th class=\"col_heading level0 col0\" >Negative</th>        <th class=\"col_heading level0 col1\" >Positive</th>    </tr>    <tr>        <th class=\"index_name level0\" >Obesity</th>        <th class=\"blank\" ></th>        <th class=\"blank\" ></th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545level0_row0\" class=\"row_heading level0 row0\" >No</th>\n",
       "                        <td id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row0_col0\" class=\"data row0 col0\" >86.500000</td>\n",
       "                        <td id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row0_col1\" class=\"data row0 col1\" >80.940000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545level0_row1\" class=\"row_heading level0 row1\" >Yes</th>\n",
       "                        <td id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row1_col0\" class=\"data row1 col0\" >13.500000</td>\n",
       "                        <td id=\"T_a346fda7_ca94_11eb_bd8e_10e7c6f66545row1_col1\" class=\"data row1 col1\" >19.060000</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x18a7c3dfe50>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "plot_criteria= ['Obesity', 'class']\n",
    "cm = sns.light_palette(\"red\", as_cmap=True)\n",
    "(round(pd.crosstab(df[plot_criteria[0]], df[plot_criteria[1]], normalize='columns') * 100,2)).style.background_gradient(cmap = cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data pre process"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['class'] = df['class'].apply(lambda x: 0 if x=='Negative' else 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= df.drop(['class'],axis=1)\n",
    "y=df['class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Gender', 'Polyuria', 'Polydipsia', 'sudden weight loss', 'weakness',\n",
      "       'Polyphagia', 'Genital thrush', 'visual blurring', 'Itching',\n",
      "       'Irritability', 'delayed healing', 'partial paresis',\n",
      "       'muscle stiffness', 'Alopecia', 'Obesity'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "objList = X.select_dtypes(include = \"object\").columns\n",
    "print (objList)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 520 entries, 0 to 519\n",
      "Data columns (total 16 columns):\n",
      " #   Column              Non-Null Count  Dtype\n",
      "---  ------              --------------  -----\n",
      " 0   Age                 520 non-null    int64\n",
      " 1   Gender              520 non-null    int32\n",
      " 2   Polyuria            520 non-null    int32\n",
      " 3   Polydipsia          520 non-null    int32\n",
      " 4   sudden weight loss  520 non-null    int32\n",
      " 5   weakness            520 non-null    int32\n",
      " 6   Polyphagia          520 non-null    int32\n",
      " 7   Genital thrush      520 non-null    int32\n",
      " 8   visual blurring     520 non-null    int32\n",
      " 9   Itching             520 non-null    int32\n",
      " 10  Irritability        520 non-null    int32\n",
      " 11  delayed healing     520 non-null    int32\n",
      " 12  partial paresis     520 non-null    int32\n",
      " 13  muscle stiffness    520 non-null    int32\n",
      " 14  Alopecia            520 non-null    int32\n",
      " 15  Obesity             520 non-null    int32\n",
      "dtypes: int32(15), int64(1)\n",
      "memory usage: 34.7 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "#Label Encoding for object to numeric conversion\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "\n",
    "for feat in objList:\n",
    "    X[feat] = le.fit_transform(X[feat].astype(str))\n",
    "\n",
    "print (X.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Polyuria</th>\n",
       "      <th>Polydipsia</th>\n",
       "      <th>sudden weight loss</th>\n",
       "      <th>weakness</th>\n",
       "      <th>Polyphagia</th>\n",
       "      <th>Genital thrush</th>\n",
       "      <th>visual blurring</th>\n",
       "      <th>Itching</th>\n",
       "      <th>Irritability</th>\n",
       "      <th>delayed healing</th>\n",
       "      <th>partial paresis</th>\n",
       "      <th>muscle stiffness</th>\n",
       "      <th>Alopecia</th>\n",
       "      <th>Obesity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Gender  Polyuria  Polydipsia  sudden weight loss  weakness  \\\n",
       "0   40       1         0           1                   0         1   \n",
       "1   58       1         0           0                   0         1   \n",
       "2   41       1         1           0                   0         1   \n",
       "3   45       1         0           0                   1         1   \n",
       "4   60       1         1           1                   1         1   \n",
       "\n",
       "   Polyphagia  Genital thrush  visual blurring  Itching  Irritability  \\\n",
       "0           0               0                0        1             0   \n",
       "1           0               0                1        0             0   \n",
       "2           1               0                0        1             0   \n",
       "3           1               1                0        1             0   \n",
       "4           1               0                1        1             1   \n",
       "\n",
       "   delayed healing  partial paresis  muscle stiffness  Alopecia  Obesity  \n",
       "0                1                0                 1         1        1  \n",
       "1                0                1                 0         1        0  \n",
       "2                1                0                 1         1        0  \n",
       "3                1                0                 0         0        0  \n",
       "4                1                1                 1         1        1  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Age                   0.108679\n",
       "Gender               -0.449233\n",
       "Polyuria              0.665922\n",
       "Polydipsia            0.648734\n",
       "sudden weight loss    0.436568\n",
       "weakness              0.243275\n",
       "Polyphagia            0.342504\n",
       "Genital thrush        0.110288\n",
       "visual blurring       0.251300\n",
       "Itching              -0.013384\n",
       "Irritability          0.299467\n",
       "delayed healing       0.046980\n",
       "partial paresis       0.432288\n",
       "muscle stiffness      0.122474\n",
       "Alopecia             -0.267512\n",
       "Obesity               0.072173\n",
       "dtype: float64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.corrwith(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Correlation with Diabetes'}>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Correlation with Response Variable class\n",
    "\n",
    "X.corrwith(y).plot.bar(\n",
    "        figsize = (16, 6), title = \"Correlation with Diabetes\", fontsize = 15,\n",
    "        rot = 90, grid = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# train test split\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,stratify=y, random_state = 1234)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distribution of traget variable in training set\n",
      "1    256\n",
      "0    160\n",
      "Name: class, dtype: int64\n",
      "Distribution of traget variable in test set\n",
      "1    64\n",
      "0    40\n",
      "Name: class, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "## checking distribution of traget variable in train test split\n",
    "print('Distribution of traget variable in training set')\n",
    "print(y_train.value_counts())\n",
    "\n",
    "print('Distribution of traget variable in test set')\n",
    "print(y_test.value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# data nirmalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "minmax = MinMaxScaler()\n",
    "X_train[['Age']] = minmax.fit_transform(X_train[['Age']])\n",
    "X_test[['Age']] = minmax.transform(X_test[['Age']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Polyuria</th>\n",
       "      <th>Polydipsia</th>\n",
       "      <th>sudden weight loss</th>\n",
       "      <th>weakness</th>\n",
       "      <th>Polyphagia</th>\n",
       "      <th>Genital thrush</th>\n",
       "      <th>visual blurring</th>\n",
       "      <th>Itching</th>\n",
       "      <th>Irritability</th>\n",
       "      <th>delayed healing</th>\n",
       "      <th>partial paresis</th>\n",
       "      <th>muscle stiffness</th>\n",
       "      <th>Alopecia</th>\n",
       "      <th>Obesity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>0.405405</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>274</th>\n",
       "      <td>0.554054</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>424</th>\n",
       "      <td>0.364865</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>0.527027</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>159</th>\n",
       "      <td>0.297297</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Age  Gender  Polyuria  Polydipsia  sudden weight loss  weakness  \\\n",
       "246  0.405405       1         0           0                   0         1   \n",
       "274  0.554054       1         0           0                   0         0   \n",
       "424  0.364865       1         1           1                   1         1   \n",
       "316  0.527027       0         0           0                   0         1   \n",
       "159  0.297297       0         1           1                   1         1   \n",
       "\n",
       "     Polyphagia  Genital thrush  visual blurring  Itching  Irritability  \\\n",
       "246           0               0                0        1             0   \n",
       "274           1               0                1        0             0   \n",
       "424           0               1                0        0             0   \n",
       "316           0               1                0        1             0   \n",
       "159           1               0                1        1             1   \n",
       "\n",
       "     delayed healing  partial paresis  muscle stiffness  Alopecia  Obesity  \n",
       "246                1                0                 0         1        0  \n",
       "274                0                0                 1         0        0  \n",
       "424                0                0                 0         0        0  \n",
       "316                1                1                 0         1        0  \n",
       "159                1                1                 1         0        0  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model building \n",
    "\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(random_state=0)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logi = LogisticRegression(random_state = 0, penalty = 'l2')\n",
    "logi.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9181184668989548"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "from sklearn import model_selection\n",
    "\n",
    "kfold = model_selection.KFold(n_splits=10, random_state=7)\n",
    "scoring = 'accuracy'\n",
    "\n",
    "acc_logi = cross_val_score(estimator = logi, X = X_train, y = y_train, cv = kfold,scoring=scoring)\n",
    "acc_logi.mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Cross Val Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>ROC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.971154</td>\n",
       "      <td>0.918118</td>\n",
       "      <td>0.984127</td>\n",
       "      <td>0.96875</td>\n",
       "      <td>0.976378</td>\n",
       "      <td>0.971875</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Model  Accuracy  Cross Val Accuracy  Precision   Recall  \\\n",
       "0  Logistic Regression  0.971154            0.918118   0.984127  0.96875   \n",
       "\n",
       "   F1 Score       ROC  \n",
       "0  0.976378  0.971875  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "y_predict_logi = logi.predict(X_test)\n",
    "acc= accuracy_score(y_test, y_predict_logi)\n",
    "roc=roc_auc_score(y_test, y_predict_logi)\n",
    "prec = precision_score(y_test, y_predict_logi)\n",
    "rec = recall_score(y_test, y_predict_logi)\n",
    "f1 = f1_score(y_test, y_predict_logi)\n",
    "\n",
    "results = pd.DataFrame([['Logistic Regression',acc, acc_logi.mean(),prec,rec, f1,roc]],\n",
    "               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\n",
    "results\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "cm_logi = confusion_matrix(y_test, y_predict_logi)\n",
    "plt.title('Confusion matrix of the Logistic classifier')\n",
    "sns.heatmap(cm_logi,annot=True,fmt=\"d\")\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.975"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP = cm_logi[1,1] # true positive \n",
    "TN = cm_logi[0,0] # true negatives\n",
    "FP = cm_logi[0,1] # false positives\n",
    "FN = cm_logi[1,0] # false negatives\n",
    "# Let us calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importance = abs(logi.coef_[0])\n",
    "feature_importance = 100.0 * (feature_importance / feature_importance.max())\n",
    "sorted_idx = np.argsort(feature_importance)\n",
    "pos = np.arange(sorted_idx.shape[0]) + .3\n",
    "\n",
    "featfig = plt.figure(figsize=(12,8))\n",
    "featax = featfig.add_subplot(1, 1, 1)\n",
    "featax.barh(pos, feature_importance[sorted_idx], align='center')\n",
    "featax.set_yticks(pos)\n",
    "featax.set_yticklabels(np.array(X_train.columns)[sorted_idx], fontsize=8)\n",
    "featax.set_xlabel('Relative Feature Importance')\n",
    "\n",
    "plt.tight_layout()   \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#    Random forest(before tuning)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "rf = RandomForestClassifier(criterion='gini',n_estimators=100)\n",
    "rf.fit(X_train,y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9757839721254357"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "kfold = model_selection.KFold(n_splits=10, random_state=7)\n",
    "scoring = 'accuracy'\n",
    "\n",
    "acc_rf = cross_val_score(estimator = rf, X = X_train, y = y_train, cv = kfold,scoring=scoring)\n",
    "acc_rf.mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Cross Val Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>ROC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.971154</td>\n",
       "      <td>0.918118</td>\n",
       "      <td>0.984127</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.976378</td>\n",
       "      <td>0.971875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Random Forest (Untuned)</td>\n",
       "      <td>0.990385</td>\n",
       "      <td>0.975784</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.992126</td>\n",
       "      <td>0.992188</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Model  Accuracy  Cross Val Accuracy  Precision    Recall  \\\n",
       "0      Logistic Regression  0.971154            0.918118   0.984127  0.968750   \n",
       "1  Random Forest (Untuned)  0.990385            0.975784   1.000000  0.984375   \n",
       "\n",
       "   F1 Score       ROC  \n",
       "0  0.976378  0.971875  \n",
       "1  0.992126  0.992188  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict_r = rf.predict(X_test)\n",
    "roc=roc_auc_score(y_test, y_predict_r)\n",
    "acc = accuracy_score(y_test, y_predict_r)\n",
    "prec = precision_score(y_test, y_predict_r)\n",
    "rec = recall_score(y_test, y_predict_r)\n",
    "f1 = f1_score(y_test, y_predict_r)\n",
    "\n",
    "model_results = pd.DataFrame([['Random Forest (Untuned)',acc, acc_rf.mean(),prec,rec, f1,roc]],\n",
    "               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\n",
    "results = results.append(model_results, ignore_index = True)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "cm_rf = confusion_matrix(y_test, y_predict_r)\n",
    "plt.title('Confusion matrix of the Random Forest classifier')\n",
    "sns.heatmap(cm_rf,annot=True,fmt=\"d\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP = cm_rf[1,1] # true positive \n",
    "TN = cm_rf[0,0] # true negatives\n",
    "FP = cm_rf[0,1] # false positives\n",
    "FN = cm_rf[1,0] # false negatives\n",
    "# Let us calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances = pd.Series(rf.feature_importances_, index=X_train.columns)\n",
    "feat_importances.nlargest(20).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# top 10 feat.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'Gender', 'Polyuria', 'Polydipsia', 'sudden weight loss',\n",
       "       'weakness', 'Polyphagia', 'Genital thrush', 'visual blurring',\n",
       "       'Itching', 'Irritability', 'delayed healing', 'partial paresis',\n",
       "       'muscle stiffness', 'Alopecia', 'Obesity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Polyuria</th>\n",
       "      <th>Polydipsia</th>\n",
       "      <th>sudden weight loss</th>\n",
       "      <th>weakness</th>\n",
       "      <th>Polyphagia</th>\n",
       "      <th>Genital thrush</th>\n",
       "      <th>visual blurring</th>\n",
       "      <th>Itching</th>\n",
       "      <th>Irritability</th>\n",
       "      <th>delayed healing</th>\n",
       "      <th>partial paresis</th>\n",
       "      <th>muscle stiffness</th>\n",
       "      <th>Alopecia</th>\n",
       "      <th>Obesity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Gender  Polyuria  Polydipsia  sudden weight loss  weakness  \\\n",
       "0   40       1         0           1                   0         1   \n",
       "1   58       1         0           0                   0         1   \n",
       "2   41       1         1           0                   0         1   \n",
       "3   45       1         0           0                   1         1   \n",
       "4   60       1         1           1                   1         1   \n",
       "\n",
       "   Polyphagia  Genital thrush  visual blurring  Itching  Irritability  \\\n",
       "0           0               0                0        1             0   \n",
       "1           0               0                1        0             0   \n",
       "2           1               0                0        1             0   \n",
       "3           1               1                0        1             0   \n",
       "4           1               0                1        1             1   \n",
       "\n",
       "   delayed healing  partial paresis  muscle stiffness  Alopecia  Obesity  \n",
       "0                1                0                 1         1        1  \n",
       "1                0                1                 0         1        0  \n",
       "2                1                0                 1         1        0  \n",
       "3                1                0                 0         0        0  \n",
       "4                1                1                 1         1        1  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# filtering unwanted feat.."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_fs = X[['Polyuria', 'Polydipsia','Age', 'Gender','partial paresis','sudden weight loss','Irritability', 'delayed healing','Alopecia','Itching']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X_fs, y, test_size = 0.2,stratify=y, random_state = 1234)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# data normmalization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "minmax = MinMaxScaler()\n",
    "X_train[['Age']] = minmax.fit_transform(X_train[['Age']])\n",
    "X_test[['Age']] = minmax.transform(X_test[['Age']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# model build"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(random_state=0)"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logi = LogisticRegression(random_state = 0, penalty = 'l2')\n",
    "logi.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# cross validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(close=None, block=None)>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cm_rf = confusion_matrix(y_test, y_predict_r)\n",
    "plt.title('Confusion matrix of the Random Forest classifier')\n",
    "sns.heatmap(cm_rf,annot=True,fmt=\"d\")\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8988385598141695"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "kfold = model_selection.KFold(n_splits=10, random_state=7)\n",
    "scoring = 'accuracy'\n",
    "\n",
    "acc_logi = cross_val_score(estimator = logi, X = X_train, y = y_train, cv = kfold,scoring=scoring)\n",
    "acc_logi.mean()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Cross Val Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>ROC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.971154</td>\n",
       "      <td>0.918118</td>\n",
       "      <td>0.984127</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.976378</td>\n",
       "      <td>0.971875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Random Forest (Untuned)</td>\n",
       "      <td>0.990385</td>\n",
       "      <td>0.975784</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.992126</td>\n",
       "      <td>0.992188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Logistic Regression-Post FS</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.898839</td>\n",
       "      <td>0.983871</td>\n",
       "      <td>0.953125</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.964063</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Model  Accuracy  Cross Val Accuracy  Precision  \\\n",
       "0          Logistic Regression  0.971154            0.918118   0.984127   \n",
       "1      Random Forest (Untuned)  0.990385            0.975784   1.000000   \n",
       "2  Logistic Regression-Post FS  0.961538            0.898839   0.983871   \n",
       "\n",
       "     Recall  F1 Score       ROC  \n",
       "0  0.968750  0.976378  0.971875  \n",
       "1  0.984375  0.992126  0.992188  \n",
       "2  0.953125  0.968254  0.964063  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict_logi = logi.predict(X_test)\n",
    "acc= accuracy_score(y_test, y_predict_logi)\n",
    "roc=roc_auc_score(y_test, y_predict_logi)\n",
    "prec = precision_score(y_test, y_predict_logi)\n",
    "rec = recall_score(y_test, y_predict_logi)\n",
    "f1 = f1_score(y_test, y_predict_logi)\n",
    "\n",
    "model_results = pd.DataFrame([['Logistic Regression-Post FS',acc, acc_logi.mean(),prec,rec, f1,roc]],\n",
    "               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\n",
    "results = results.append(model_results, ignore_index = True)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Random Forest - Post Feature selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf = RandomForestClassifier(criterion='gini',n_estimators=100)\n",
    "rf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Cross Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9638792102206736"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kfold = model_selection.KFold(n_splits=10, random_state=7)\n",
    "scoring = 'accuracy'\n",
    "\n",
    "acc_rf = cross_val_score(estimator = rf, X = X_train, y = y_train, cv = kfold,scoring=scoring)\n",
    "acc_rf.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>Accuracy</th>\n",
       "      <th>Cross Val Accuracy</th>\n",
       "      <th>Precision</th>\n",
       "      <th>Recall</th>\n",
       "      <th>F1 Score</th>\n",
       "      <th>ROC</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic Regression</td>\n",
       "      <td>0.971154</td>\n",
       "      <td>0.918118</td>\n",
       "      <td>0.984127</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.976378</td>\n",
       "      <td>0.971875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Random Forest (Untuned)</td>\n",
       "      <td>0.990385</td>\n",
       "      <td>0.975784</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.992126</td>\n",
       "      <td>0.992188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Logistic Regression-Post FS</td>\n",
       "      <td>0.961538</td>\n",
       "      <td>0.898839</td>\n",
       "      <td>0.983871</td>\n",
       "      <td>0.953125</td>\n",
       "      <td>0.968254</td>\n",
       "      <td>0.964063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Random Forest- Post FS</td>\n",
       "      <td>0.980769</td>\n",
       "      <td>0.963879</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.984127</td>\n",
       "      <td>0.984375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Model  Accuracy  Cross Val Accuracy  Precision  \\\n",
       "0          Logistic Regression  0.971154            0.918118   0.984127   \n",
       "1      Random Forest (Untuned)  0.990385            0.975784   1.000000   \n",
       "2  Logistic Regression-Post FS  0.961538            0.898839   0.983871   \n",
       "3       Random Forest- Post FS  0.980769            0.963879   1.000000   \n",
       "\n",
       "     Recall  F1 Score       ROC  \n",
       "0  0.968750  0.976378  0.971875  \n",
       "1  0.984375  0.992126  0.992188  \n",
       "2  0.953125  0.968254  0.964063  \n",
       "3  0.968750  0.984127  0.984375  "
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_predict_r = rf.predict(X_test)\n",
    "roc=roc_auc_score(y_test, y_predict_r)\n",
    "acc = accuracy_score(y_test, y_predict_r)\n",
    "prec = precision_score(y_test, y_predict_r)\n",
    "rec = recall_score(y_test, y_predict_r)\n",
    "f1 = f1_score(y_test, y_predict_r)\n",
    "\n",
    "model_results = pd.DataFrame([['Random Forest- Post FS',acc, acc_rf.mean(),prec,rec, f1,roc]],\n",
    "               columns = ['Model', 'Accuracy','Cross Val Accuracy', 'Precision', 'Recall', 'F1 Score','ROC'])\n",
    "results = results.append(model_results, ignore_index = True)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TP = cm_rf[1,1] # true positive \n",
    "TN = cm_rf[0,0] # true negatives\n",
    "FP = cm_rf[0,1] # false positives\n",
    "FN = cm_rf[1,0] # false negatives\n",
    "# Let us calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "feat_importances = pd.Series(rf.feature_importances_, index=X_train.columns)\n",
    "feat_importances.nlargest(20).plot(kind='barh')"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "\n",
    "Plotting ROC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "# Add the models to the list that you want to view on the ROC plot\n",
    "models = [\n",
    "{\n",
    "    'label': 'Logistic Regression',\n",
    "    'model': LogisticRegression(random_state = 0, penalty = 'l2'),\n",
    "},\n",
    "\n",
    "    {\n",
    "    'label': 'Random Forest',\n",
    "    'model': RandomForestClassifier(n_estimators = 100,criterion='gini', random_state = 47),\n",
    "},\n",
    "    \n",
    "]\n",
    "\n",
    "# Below for loop iterates through your models list\n",
    "for m in models:\n",
    "    model = m['model'] # select the model\n",
    "    model.fit(X_train, y_train) # train the model\n",
    "    y_pred=model.predict(X_test) # predict the test data\n",
    "# Compute False postive rate, and True positive rate\n",
    "    fpr, tpr, thresholds = metrics.roc_curve(y_test, model.predict_proba(X_test)[:,1])\n",
    "# Calculate Area under the curve to display on the plot\n",
    "    auc = metrics.roc_auc_score(y_test,model.predict(X_test))\n",
    "# Now, plot the computed values\n",
    "    plt.plot(fpr, tpr, label='%s ROC (area = %0.2f)' % (m['label'], auc))\n",
    "# Custom settings for the plot \n",
    "plt.plot([0, 1], [0, 1],'r--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('1-Specificity(False Positive Rate)')\n",
    "plt.ylabel('Sensitivity(True Positive Rate)')\n",
    "plt.title('Receiver Operating Characteristic')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
